import java.util.regex.Pattern
group 'org.blockchain_monitoring'
version = '1.1.0'

apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(
                    url: "${nexusUrl}/content/repositories/releases") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
            snapshotRepository(
                    url: "${nexusUrl}/content/repositories/snapshots") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}

task incrementPointNumberInVersionName << {
    println(":incrementVersionName - Incrementing Poin Version ...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version = '(\\d+)\\.(\\d+)\\.(\\d+)'")
    def buildScript = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildScript)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
    def mNextVersionName = majorVersion + "." + minorVersion + "." + (pointVersion + 1)
    def content = matcherVersionNumber.replaceAll("version = \'" + mNextVersionName + "\'")
    println(":incrementVersionName - new versionName=" + mNextVersionName);
    buildFile.write(content)
}

task incrementMinorNumberInVersionName << {
    println(":incrementVersionName - Incrementing Minor Version ...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version = '(\\d+)\\.(\\d+)\\.(\\d+)'")
    def buildScript = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildScript)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def mNextVersionName = majorVersion + "." + (minorVersion + 1) + ".0"
    def content = matcherVersionNumber.replaceAll("version = \'" + mNextVersionName + "\'")
    println(":incrementVersionName - new versionName=" + mNextVersionName);
    buildFile.write(content)
}

task incrementMajorNumberInVersionName << {
    println(":incrementVersionName - Incrementing Major Version ...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version = '(\\d+)\\.(\\d+)\\.(\\d+)'")
    def buildScript = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildScript)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def mNextVersionName = (majorVersion + 1) + ".0.0"
    def content = matcherVersionNumber.replaceAll("version = \'" + mNextVersionName + "\'")
    println(":incrementVersionName - new versionName=" + mNextVersionName);
    buildFile.write(content)
}

